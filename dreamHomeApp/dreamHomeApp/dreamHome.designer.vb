'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="dreamHomeDB")>  _
Partial Public Class dreamHomeDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBranch(instance As Branch)
    End Sub
  Partial Private Sub UpdateBranch(instance As Branch)
    End Sub
  Partial Private Sub DeleteBranch(instance As Branch)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.WindowsApplication1.My.MySettings.Default.dreamHomeDBConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Branches() As System.Data.Linq.Table(Of Branch)
		Get
			Return Me.GetTable(Of Branch)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.loadBranch")>  _
	Public Function loadBranch() As ISingleResult(Of loadBranchResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of loadBranchResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.insertBranch")>  _
	Public Function insertBranch(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal branchNo As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal street As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal city As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal postcode As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), branchNo, street, city, postcode)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.filterBranch")>  _
	Public Function filterBranch(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal city As String) As ISingleResult(Of filterBranchResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), city)
		Return CType(result.ReturnValue,ISingleResult(Of filterBranchResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.deleteBranch")>  _
	Public Function deleteBranch(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal branchNo As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), branchNo)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Branch")>  _
Partial Public Class Branch
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _branchNo As String
	
	Private _street As String
	
	Private _city As String
	
	Private _postcode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbranchNoChanging(value As String)
    End Sub
    Partial Private Sub OnbranchNoChanged()
    End Sub
    Partial Private Sub OnstreetChanging(value As String)
    End Sub
    Partial Private Sub OnstreetChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnpostcodeChanging(value As String)
    End Sub
    Partial Private Sub OnpostcodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_branchNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property branchNo() As String
		Get
			Return Me._branchNo
		End Get
		Set
			If (String.Equals(Me._branchNo, value) = false) Then
				Me.OnbranchNoChanging(value)
				Me.SendPropertyChanging
				Me._branchNo = value
				Me.SendPropertyChanged("branchNo")
				Me.OnbranchNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_street", DbType:="VarChar(255)")>  _
	Public Property street() As String
		Get
			Return Me._street
		End Get
		Set
			If (String.Equals(Me._street, value) = false) Then
				Me.OnstreetChanging(value)
				Me.SendPropertyChanging
				Me._street = value
				Me.SendPropertyChanged("street")
				Me.OnstreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(255)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postcode", DbType:="VarChar(255)")>  _
	Public Property postcode() As String
		Get
			Return Me._postcode
		End Get
		Set
			If (String.Equals(Me._postcode, value) = false) Then
				Me.OnpostcodeChanging(value)
				Me.SendPropertyChanging
				Me._postcode = value
				Me.SendPropertyChanged("postcode")
				Me.OnpostcodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class loadBranchResult
	
	Private _branchNo As String
	
	Private _street As String
	
	Private _city As String
	
	Private _postcode As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_branchNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property branchNo() As String
		Get
			Return Me._branchNo
		End Get
		Set
			If (String.Equals(Me._branchNo, value) = false) Then
				Me._branchNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_street", DbType:="VarChar(255)")>  _
	Public Property street() As String
		Get
			Return Me._street
		End Get
		Set
			If (String.Equals(Me._street, value) = false) Then
				Me._street = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(255)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postcode", DbType:="VarChar(255)")>  _
	Public Property postcode() As String
		Get
			Return Me._postcode
		End Get
		Set
			If (String.Equals(Me._postcode, value) = false) Then
				Me._postcode = value
			End If
		End Set
	End Property
End Class

Partial Public Class filterBranchResult
	
	Private _branchNo As String
	
	Private _street As String
	
	Private _city As String
	
	Private _postcode As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_branchNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property branchNo() As String
		Get
			Return Me._branchNo
		End Get
		Set
			If (String.Equals(Me._branchNo, value) = false) Then
				Me._branchNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_street", DbType:="VarChar(255)")>  _
	Public Property street() As String
		Get
			Return Me._street
		End Get
		Set
			If (String.Equals(Me._street, value) = false) Then
				Me._street = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(255)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postcode", DbType:="VarChar(255)")>  _
	Public Property postcode() As String
		Get
			Return Me._postcode
		End Get
		Set
			If (String.Equals(Me._postcode, value) = false) Then
				Me._postcode = value
			End If
		End Set
	End Property
End Class
